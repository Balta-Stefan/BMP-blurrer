; register r15d holds image_width
; register r14d holds image_height 
; register r13 is holding the address of the first picture pixel.
; register r12w is holding the variable blur_radius 
; register r11w is holding the variable split (split = (blur_radius-1)/2)

	
//------------------try 2------------------
; -----horizontal blur----- ; seems to be done
; blurred image pointer -> RBX
; row counter (y) -> ECX
; column counter (x) -> EDI
; leftEdge -> ESI
; rightEdge -> EBP
; finalIndex -> ESP
; 3 16-bit accumulators:
	; red - r8d 
	; green - r9d 
	; blue - r10d 



; -----vertical  blur-----

	
; tripleWidth = EBP
; rowAccumulatorPointer (doesn't change) -> RBX
; rowCounter (y) -> ECX
; upperEdge -> ESI
; lowerEdge -> EDI
; blurredImagePixels (array) -> r8
; columnLoop (x) -> r10d
; rowAccumulatorPointer (array) changes because of the innermost loop -> r9
; temporarySinglePixelAccumulator (to get value from blurredImagePixels) -> SP
; temporarySinglePixelAccumulator2 (to get a value from rowAccumulator) -> AX

; last loop:
	; counter -> ESI
	; y*tripleWidth -> EDI 
	; value of rowAccumulator[x] -> AX
	; image pointer -> RSP
	
	
	

floatAVXvertical
	; all work on the registers will be done manually, no loops involved
	; only 7 AVX registers will be loaded with data 
	; another 7 will be accumulators 
	; one AVX register will hold floating point value of blur_radius 
	; the remaining AVX register will be a temporary register
	
	
	; ymm15 -> blur_radius
	
	; registers ymm0 to ymm6 are used as accumulators
	
	
	; aligned_offload_area pointer -> RAX
	; blurredImagePixels -> r12
	; numOfReads -> EBX (= 3*imageWidth / 56)
	; rowCounter (y) -> EDI 
	; upperEdge -> ESI
	; lowerEdge -> ECX
	; AVXchunkCounter (0, ..., numOfReads) ->r8d
	; 3 * i * imageWidth + 8*(7 * AVXchunkCounter + {0, 1, 2, ..., 7}) -> r9d, r10d
	; temp AVX register -> ymm14
	
	
	
	; unloading: image[3 * y * imageWidth + 8*(avxChunk * 7 + i) + j] = (unsigned char)(unloadArea[j]);
	
	
 
 
 
; blurring leftovers for serial AVX

if((3*imageWidth) % 56 != 0)





 
 